name: Document Summarization CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          echo "MAX_INPUT_TOKENS=1024" >> $GITHUB_ENV
          echo "MAX_TOTAL_TOKENS=2048" >> $GITHUB_ENV
          echo "no_proxy=${{ secrets.NO_PROXY }},${{ secrets.HOST_IP }}" >> $GITHUB_ENV
          echo "MEGA_SERVICE_HOST_IP=${{ secrets.HOST_IP }}" >> $GITHUB_ENV
          echo "LLM_SERVICE_HOST_IP=${{ secrets.HOST_IP }}" >> $GITHUB_ENV
          echo "ASR_SERVICE_HOST_IP=${{ secrets.HOST_IP }}" >> $GITHUB_ENV
          echo "LLM_MODEL_ID=Intel/neural-chat-7b-v3-3" >> $GITHUB_ENV
          echo "BACKEND_SERVICE_ENDPOINT=http://${{ secrets.HOST_IP }}:8888/v1/docsum" >> $GITHUB_ENV
          echo "LLM_ENDPOINT_PORT=8008" >> $GITHUB_ENV
          echo "DOCSUM_PORT=9000" >> $GITHUB_ENV
          echo "LLM_ENDPOINT=http://${{ secrets.HOST_IP }}:8008" >> $GITHUB_ENV
          echo "DocSum_COMPONENT_NAME=OpeaDocSumTgi" >> $GITHUB_ENV
          echo "HOST_IP=${{ secrets.HOST_IP }}" >> $GITHUB_ENV
          echo "NO_PROXY=${{ secrets.NO_PROXY }}" >> $GITHUB_ENV
          echo "HUGGINGFACEHUB_API_TOKEN=${{ secrets.HUGGINGFACEHUB_API_TOKEN }}" >> $GITHUB_ENV

      - name: Deploy and Monitor Services
        run: |
          set +e  # Prevent script from exiting immediately on failure
          COMPOSE_PATH="docker_compose/intel/cpu/xeon/compose.yaml"
          MAX_RETRIES=5
          RETRY_DELAY=20  # Wait 20 seconds before retrying
          attempt=0
          success=0

          while [ $attempt -lt $MAX_RETRIES ]; do
            echo "üõ†Ô∏è Starting Docker Compose (Attempt #$((attempt+1)))..."
            docker compose -f $COMPOSE_PATH down || true
            docker compose -f $COMPOSE_PATH up -d

            sleep $RETRY_DELAY  # Wait for services to stabilize

            # Check for unhealthy containers
            UNHEALTHY_CONTAINERS=$(docker ps --filter "status=unhealthy" --format "{{.Names}}")

            if [ -z "$UNHEALTHY_CONTAINERS" ]; then
              echo "‚úÖ All containers are healthy!"
              success=1
              break
            else
              echo "‚ùå Unhealthy containers detected: $UNHEALTHY_CONTAINERS"
              docker logs tgi-server || true  # Print logs for debugging
            fi

            attempt=$((attempt + 1))
            echo "‚è≥ Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          done

          if [ $success -ne 1 ]; then
            echo "‚ùå ERROR: Services failed after $MAX_RETRIES retries."
            exit 1  # Only fail the workflow after all retries
          fi

  test-document-summarization:
    needs: setup-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test Text Summarization
        run: |
          set +e  # Allow retrying on failure
          MAX_RETRIES=3
          RETRY_DELAY=10
          attempt=0
          success=0

          while [ $attempt -lt $MAX_RETRIES ]; do
            echo "üìù Running Summarization Test (Attempt #$((attempt+1)))..."
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST http://${{ env.HOST_IP }}:8888/v1/docsum \
                        -H "Content-Type: application/json" \
                        -d '{"type": "text", "messages": "Text Embeddings Inference is a toolkit for deploying open-source models."}')
            
            if [ "$RESPONSE" -eq 200 ]; then
              echo "‚úÖ Test passed!"
              success=1
              break
            else
              echo "‚ö†Ô∏è Test failed with HTTP status: $RESPONSE"
            fi

            attempt=$((attempt + 1))
            echo "üîÑ Retrying test in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          done

          if [ $success -ne 1 ]; then
            echo "‚ùå Test failed after $MAX_RETRIES retries."
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          cd docker_compose/intel/cpu/xeon/
          docker compose -f compose.yaml down
